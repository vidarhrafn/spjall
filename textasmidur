
<!DOCTYPE html>
<html lang="is">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Textasmíða App</title>
    <style>
        /* General styling */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
        }
        h2 {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 8px;
        }
        
        /* Screens */
        #screen1, #screen2 {
            width: 100%;
        }
        #screen2 {
            display: none;
        }
        
        /* Form elements */
        input, textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 15px;
            margin-bottom: 16px;
        }
        textarea {
            height: 250px;
            resize: vertical;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        /* Buttons */
        button {
            cursor: pointer;
            border: none;
            border-radius: 8px;
            font-size: 15px;
            padding: 10px 15px;
            transition: background-color 0.2s;
        }
        .btn-blue {
            background-color: #3498db;
            color: white;
        }
        .btn-blue:hover {
            background-color: #2980b9;
        }
        .btn-gray {
            background-color: #e0e0e0;
            color: #555;
        }
        .btn-gray:hover {
            background-color: #ccc;
        }
        .btn-green {
            background-color: #2ecc71;
            color: white;
        }
        .btn-green:hover {
            background-color: #27ae60;
        }
        .btn-red {
            background-color: #e74c3c;
            color: white;
        }
        .btn-red:hover {
            background-color: #c0392b;
        }
        
        /* Layout for screen 2 */
        .two-column {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }
        .left-column {
            flex: 3;
        }
        .right-column {
            flex: 2;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        @media (max-width: 768px) {
            .two-column {
                flex-direction: column;
            }
        }
        
        /* Content boxes */
        .content-box {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 16px;
            overflow: hidden;
        }
        .box-header {
            padding: 12px 16px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .box-content {
            padding: 16px;
            min-height: 100px;
        }
        .compose-box {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 16px;
            min-height: 300px;
            background: white;
            overflow-y: auto;
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            align-content: flex-start;
        }
        
        /* Words styling */
        .word-btn {
            display: inline-block;
            padding: 5px 12px;
            border-radius: 20px;
            margin: 4px;
            cursor: grab;
            font-size: 14px;
            user-select: none;
        }
        .word-btn:active {
            cursor: grabbing;
        }
        .word-green {
            background-color: #e8f8f5;
            border: 1px solid #a3e4d7;
            color: #16a085;
        }
        .word-blue {
            background-color: #ebf5fb;
            border: 1px solid #aed6f1;
            color: #2980b9;
        }
        .word-purple {
            background-color: #f4ecf7;
            border: 1px solid #d7bde2;
            color: #8e44ad;
        }
        .selected {
            outline: 2px solid #f39c12;
            outline-offset: 1px;
        }
        .line-break {
            width: 100%;
            height: 0;
            border-bottom: 1px solid #ddd;
            margin: 8px 0;
        }
        .text-span {
            padding: 3px 6px;
            margin: 4px;
            display: inline-block;
        }
        
        /* Context menu */
        .context-menu {
            position: absolute;
            background: white;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            z-index: 1000;
            overflow: hidden;
        }
        .context-menu button {
            display: block;
            width: 100%;
            text-align: left;
            padding: 8px 16px;
            background: none;
            border: none;
            cursor: pointer;
            border-radius: 0;
        }
        .context-menu button:hover {
            background-color: #f5f5f5;
        }
        
        /* Instructions */
        .instructions {
            margin: 12px 0;
            font-size: 13px;
            color: #777;
        }
        
        /* Input group */
        .input-group {
            display: flex;
            gap: 8px;
            margin-top: 12px;
        }
        .input-group input {
            margin-bottom: 0;
        }
        
        /* Save message */
        .save-message {
            margin-top: 16px;
            padding: 16px;
            background-color: #e8f8f5;
            border: 1px solid #a3e4d7;
            border-radius: 8px;
        }
        .save-message pre {
            white-space: pre-wrap;
            margin: 0;
        }
        
        /* Action buttons */
        .action-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 12px;
        }
        
        /* Word box */
        .word-box {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 12px;
            min-height: 150px;
            background: white;
            max-height: 200px;
            overflow-y: auto;
            display: flex;
            flex-wrap: wrap;
            align-content: flex-start;
        }
        
        /* Future box */
        .future-box {
            border: 1px dashed #ccc;
            border-radius: 8px;
            padding: 12px;
            min-height: 150px;
            background: #f9f9f9;
            color: #999;
        }
        
        /* Center content */
        .center-content {
            display: flex;
            justify-content: center;
            margin: 24px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Screen 1: Input words and mood -->
        <div id="screen1">
            <h1>Textasmíða App - Skjár 1</h1>
            
            <div>
                <label for="mood">Stemmning (valkvætt):</label>
                <input 
                    type="text" 
                    id="mood" 
                    placeholder="T.d. sorgleg, glaðleg, drungaleg..."
                >
            </div>
            
            <div>
                <label for="input-text">Orð og setningar:</label>
                <textarea 
                    id="input-text" 
                    placeholder="Skrifaðu orð og setningar hér - eitt í hverja línu eða aðskilið með kommu"
                ></textarea>
            </div>
            
            <div class="center-content">
                <button id="continue-btn" class="btn-blue">Áfram</button>
            </div>
        </div>
        
        <!-- Screen 2: Compose text -->
        <div id="screen2">
            <h1>Textasmíða App - Skjár 2</h1>
            
            <div class="two-column">
                <!-- Left column - Text composition area -->
                <div class="left-column">
                    <h2>Textinn þinn:</h2>
                    <div id="compose-area" class="compose-box"></div>
                    
                    <div class="input-group">
                        <input 
                            type="text" 
                            id="manual-text" 
                            placeholder="Skrifaðu texta hér..."
                        >
                        <button id="add-text-btn" class="btn-blue">Bæta við</button>
                    </div>
                    
                    <div class="instructions">
                        <p><strong>Tvísmelltu</strong> á orð til að eyða því, <strong>hægri-smelltu</strong> fyrir valmöguleika.</p>
                        <p>Veldu orð og ýttu á: <strong>t</strong> fyrir texta, <strong>.</strong> fyrir punkt, <strong>a</strong> para við orð á undan, <strong>s</strong> para við orð á eftir.</p>
                    </div>
                    
                    <div class="action-buttons">
                        <button id="clear-btn" class="btn-gray">Hreinsa</button>
                        <button id="save-btn" class="btn-green">Vista</button>
                    </div>
                    
                    <div id="save-message-container" style="display: none;" class="save-message">
                        <pre id="save-message"></pre>
                    </div>
                </div>
                
                <!-- Right column - Three stacked boxes -->
                <div class="right-column">
                    <!-- Words box -->
                    <div>
                        <h2>Orðin þín:</h2>
                        <div id="words-area" class="word-box"></div>
                    </div>
                    
                    <!-- Suggestions box -->
                    <div>
                        <h2>Uppástungur:</h2>
                        <div id="suggestions-area" class="word-box"></div>
                    </div>
                    
                    <!-- Future box -->
                    <div>
                        <h2 style="color: #999;">Framtíðarreitur:</h2>
                        <div class="future-box"></div>
                    </div>
                </div>
            </div>
            
            <!-- Context menu (hidden by default) -->
            <div id="context-menu" class="context-menu" style="display: none;">
                <button id="delete-word-btn">Eyða orði</button>
                <button id="combine-prev-btn">Sameina við orðið á undan</button>
                <button id="combine-next-btn">Sameina við orðið á eftir</button>
            </div>
            
            <div class="center-content">
                <button id="back-btn" class="btn-gray">Til baka</button>
            </div>
        </div>
    </div>

    <script>
        // DOM elements
        const screen1 = document.getElementById('screen1');
        const screen2 = document.getElementById('screen2');
        const moodInput = document.getElementById('mood');
        const inputText = document.getElementById('input-text');
        const continueBtn = document.getElementById('continue-btn');
        const composeArea = document.getElementById('compose-area');
        const wordsArea = document.getElementById('words-area');
        const suggestionsArea = document.getElementById('suggestions-area');
        const manualText = document.getElementById('manual-text');
        const addTextBtn = document.getElementById('add-text-btn');
        const clearBtn = document.getElementById('clear-btn');
        const saveBtn = document.getElementById('save-btn');
        const saveMessageContainer = document.getElementById('save-message-container');
        const saveMessage = document.getElementById('save-message');
        const backBtn = document.getElementById('back-btn');
        const contextMenu = document.getElementById('context-menu');
        const deleteWordBtn = document.getElementById('delete-word-btn');
        const combinePrevBtn = document.getElementById('combine-prev-btn');
        const combineNextBtn = document.getElementById('combine-next-btn');
        
        // App state
        let words = [];
        let suggestions = [];
        let composedText = [];
        let selectedWordIndex = null;
        let contextMenuWordIndex = null;
        
        // Dictionary of mood-based suggestions in Icelandic
        const moodSuggestions = {
            'sorgleg': ['tár', 'myrkur', 'sakna', 'kveðja', 'einmana', 'þögn', 'horfinn', 'minnist', 'djúpur', 'falla'],
            'glaðleg': ['bros', 'sól', 'gleði', 'dans', 'hlæja', 'hamingjusöm', 'leikur', 'sumar', 'líf', 'hlátur'],
            'drungaleg': ['skuggi', 'regn', 'grár', 'þoka', 'kalt', 'dimmt', 'tómur', 'djúpur', 'hljóður', 'týndur'],
            'rómantísk': ['ást', 'koss', 'hjarta', 'mánaljós', 'hvísl', 'faðmlag', 'eilífð', 'blóm', 'stjörnur', 'heitur'],
            'upplyftandi': ['von', 'birta', 'kraftur', 'sigur', 'draumur', 'flug', 'hækka', 'frjáls', 'ný', 'tækifæri'],
            'hugleiðandi': ['hugur', 'spyrja', 'dýpt', 'leita', 'skilningur', 'tími', 'vegur', 'minning', 'spurning', 'undrun']
        };
        
        // Word associations for suggestions
        const wordAssociations = {
            'hjarta': ['slá', 'ást', 'rautt', 'tilfinning', 'blóð', 'lífið'],
            'himinn': ['blár', 'stjörnur', 'ský', 'óendanleiki', 'fugl', 'flug'],
            'nótt': ['stjörnur', 'tungl', 'draumur', 'svefn', 'þögn', 'dimmt'],
            'sól': ['hiti', 'sumar', 'geisli', 'bros', 'birta', 'dagur'],
            'vatn': ['flæði', 'tær', 'djúpt', 'speglun', 'lífið', 'regn'],
            'tími': ['líður', 'minnist', 'eilífð', 'stundarkorn', 'sekúnda', 'bíða'],
            'ást': ['hjarta', 'faðmlag', 'þrá', 'sakna', 'eilíf', 'kærleikur'],
            'draumur': ['sofna', 'vakna', 'vonir', 'framtíð', 'hugarflug', 'ímynda'],
            'líf': ['vegferð', 'öndun', 'spor', 'dans', 'saga', 'augnablik']
        };
        
        // Generate suggestions based on mood and words
        function generateSuggestions(mood, words) {
            let newSuggestions = [];
            
            // Get mood-based suggestions
            if (mood && moodSuggestions[mood.toLowerCase()]) {
                newSuggestions = [...moodSuggestions[mood.toLowerCase()]];
            } else {
                // Default suggestions if no mood
                newSuggestions = ['orð', 'setning', 'ljóð', 'saga', 'hugur', 'hjarta', 'draumur', 'líf'];
            }
            
            // Add word-based suggestions
            if (words && words.length > 0) {
                words.forEach(word => {
                    const lowerWord = word.toLowerCase().trim();
                    
                    // Check each word association
                    Object.keys(wordAssociations).forEach(key => {
                        if (lowerWord.includes(key) || key.includes(lowerWord)) {
                            // Add some associated words
                            newSuggestions = [...newSuggestions, ...wordAssociations[key].slice(0, 3)];
                        }
                    });
                });
            }
            
            // Remove duplicates and limit number of suggestions
            return [...new Set(newSuggestions)].slice(0, 12);
        }
        
        // Continue to screen 2
        continueBtn.addEventListener('click', () => {
            // Process input text to extract words
            words = inputText.value
                .split(/[\n,]+/) // Split by newline or comma
                .map(word => word.trim())
                .filter(word => word.length > 0);
            
            // Generate suggestions based on mood and words
            suggestions = generateSuggestions(moodInput.value, words);
            
            // Update UI
            renderWords();
            renderSuggestions();
            
            // Switch screens
            screen1.style.display = 'none';
            screen2.style.display = 'block';
        });
        
        // Back to screen 1
        backBtn.addEventListener('click', () => {
            screen2.style.display = 'none';
            screen1.style.display = 'block';
        });
        
        // Render words in the words area
        function renderWords() {
            wordsArea.innerHTML = '';
            
            words.forEach((word, index) => {
                const wordElement = document.createElement('div');
                wordElement.className = 'word-btn word-blue';
                wordElement.textContent = word;
                wordElement.draggable = true;
                
                // Set up drag event
                wordElement.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', word);
                    e.dataTransfer.setData('source', 'words');
                    e.dataTransfer.setData('index', index);
                });
                
                wordsArea.appendChild(wordElement);
            });
        }
        
        // Render suggestions in the suggestions area
        function renderSuggestions() {
            suggestionsArea.innerHTML = '';
            
            suggestions.forEach((suggestion, index) => {
                const suggestionElement = document.createElement('div');
                suggestionElement.className = 'word-btn word-purple';
                suggestionElement.textContent = suggestion;
                suggestionElement.draggable = true;
                
                // Set up drag event
                suggestionElement.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', suggestion);
                    e.dataTransfer.setData('source', 'suggestions');
                    e.dataTransfer.setData('index', index);
                });
                
                // Add to words when clicked
                suggestionElement.addEventListener('click', () => {
                    if (!words.includes(suggestion)) {
                        words.push(suggestion);
                        renderWords();
                    }
                });
                
                suggestionsArea.appendChild(suggestionElement);
            });
        }
        
        // Render composed text in the compose area
        function renderComposedText() {
            composeArea.innerHTML = '';
            
            composedText.forEach((item, index) => {
                // Handle line breaks
                if (typeof item === 'object' && item.type === 'linebreak') {
                    const lineBreak = document.createElement('div');
                    lineBreak.className = 'line-break';
                    lineBreak.dataset.index = index;
                    
                    // Double-click to delete
                    lineBreak.addEventListener('dblclick', () => {
                        handleDeleteWord(index);
                    });
                    
                    // Right-click for context menu
                    lineBreak.addEventListener('contextmenu', (e) => {
                        e.preventDefault();
                        showContextMenu(e, index);
                    });
                    
                    composeArea.appendChild(lineBreak);
                    return;
                }
                
                // Handle text content
                if (typeof item === 'object' && item.type === 'text') {
                    const textSpan = document.createElement('span');
                    textSpan.className = 'text-span';
                    textSpan.textContent = item.text + ' ';
                    textSpan.dataset.index = index;
                    
                    if (selectedWordIndex === index) {
                        textSpan.classList.add('selected');
                    }
                    
                    // Set up click to select
                    textSpan.addEventListener('click', () => {
                        selectWord(index);
                    });
                    
                    // Double-click to delete
                    textSpan.addEventListener('dblclick', () => {
                        handleDeleteWord(index);
                    });
                    
                    // Right-click for context menu
                    textSpan.addEventListener('contextmenu', (e) => {
                        e.preventDefault();
                        showContextMenu(e, index);
                    });
                    
                    composeArea.appendChild(textSpan);
                    return;
                }
                
                // Handle regular word buttons
                const wordElement = document.createElement('div');
                wordElement.className = 'word-btn word-green';
                wordElement.textContent = item;
                wordElement.dataset.index = index;
                wordElement.draggable = true;
                
                if (selectedWordIndex === index) {
                    wordElement.classList.add('selected');
                }
                
                // Set up drag event
                wordElement.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', item);
                    e.dataTransfer.setData('source', 'compose');
                    e.dataTransfer.setData('index', index);
                });
                
                // Set up click to select
                wordElement.addEventListener('click', () => {
                    selectWord(index);
                });
                
                // Double-click to delete
                wordElement.addEventListener('dblclick', () => {
                    handleDeleteWord(index);
                });
                
                // Right-click for context menu
                wordElement.addEventListener('contextmenu', (e) => {
                    e.preventDefault();
                    showContextMenu(e, index);
                });
                
                composeArea.appendChild(wordElement);
            });
        }
        
        // Add event listener for compose area drag events
        composeArea.addEventListener('dragover', (e) => {
            e.preventDefault();
        });
        
        composeArea.addEventListener('drop', (e) => {
            e.preventDefault();
            const word = e.dataTransfer.getData('text/plain');
            const source = e.dataTransfer.getData('source');
            const index = parseInt(e.dataTransfer.getData('index'));
            
            if (source === 'compose') {
                // Reordering within composed text
                const draggedIndex = index;
                
                // Remove from old position
                composedText.splice(draggedIndex, 1);
                
                // Find nearest index to drop at
                let targetIndex = composedText.length; // Default to end
                const elements = composeArea.querySelectorAll('[data-index]');
                
                for (let i = 0; i < elements.length; i++) {
                    const rect = elements[i].getBoundingClientRect();
                    if (e.clientX < rect.left + rect.width / 2 && e.clientY < rect.top + rect.height / 2) {
                        targetIndex = parseInt(elements[i].dataset.index);
                        if (targetIndex > draggedIndex) {
                            targetIndex--;
                        }
                        break;
                    }
                }
                
                // Insert at new position
                composedText.splice(targetIndex, 0, word);
            } else {
                // Adding from words or suggestions
                composedText.push(word);
            }
            
            renderComposedText();
        });
        
        // Add manual text
        addTextBtn.addEventListener('click', () => {
            if (manualText.value.trim()) {
                // Split by spaces to create multiple buttons
                const newWords = manualText.value.trim().split(/\s+/);
                composedText.push(...newWords);
                manualText.value = '';
                renderComposedText();
            }
        });
        
        // Clear composed text
        clearBtn.addEventListener('click', () => {
            composedText = [];
            manualText.value = '';
            saveMessageContainer.style.display = 'none';
            renderComposedText();
        });
        
        // Save composed text
        saveBtn.addEventListener('click', () => {
            // Get text from composed words with line breaks
            const composedTextString = getComposedTextString();
            
            // Display the save message
            saveMessage.textContent = `Vistaður texti:\n${composedTextString}`;
            saveMessageContainer.style.display = 'block';
        });
        
        // Get formatted text from composed text array
        function getComposedTextString() {
            let result = '';
            let currentLine = '';
            
            composedText.forEach((item) => {
                if (typeof item === 'object' && item.type === 'linebreak') {
                    // Add current line to result and start a new line
                    result += currentLine + '\n';
                    currentLine = '';
                } else if (typeof item === 'object' && item.type === 'text') {
                    // Add text item
                    if (currentLine.length > 0) currentLine += ' ';
                    currentLine += item.text;
                } else if (typeof item === 'string') {
                    // Add string item
                    if (currentLine.length > 0) currentLine += ' ';
                    currentLine += item;
                }
            });
            
            // Add the last line if it exists
            if (currentLine.length > 0) {
                result += currentLine;
            }
            
            return result;
        }
        
        // Select a word
        function selectWord(index) {
            selectedWordIndex = (selectedWordIndex === index) ? null : index;
            renderComposedText();
        }
        
        // Handle delete word
        function handleDeleteWord(index) {
            if (index === undefined || index === null) return;
            
            // Get the word to be removed
            const item = composedText[index];
            
            // Remove from composed text
            composedText.splice(index, 1);
            
            // Add back to words list if it's a normal word
            if (typeof item === 'string') {
                // Clean the word (remove punctuation)
                const cleanWord = item.replace(/[.,!?;:]+$/, '');
                
                // Add to words if not already there
                if (!words.includes(cleanWord)) {
                    words.push(cleanWord);
                    renderWords();
                }
            } else if (item && item.type === 'text') {
                // Handle text type item
                const cleanWord = item.text.replace(/[.,!?;:]+$/, '');
                
                // Add to words if not already there
                if (!words.includes(cleanWord)) {
                    words.push(cleanWord);
                    renderWords();
                }
            }
            
            // Clear selection if needed
            if (index === selectedWordIndex) {
                selectedWordIndex = null;
            }
            
            renderComposedText();
        }
        
        // Show context menu
        function showContextMenu(e, index) {
            contextMenuWordIndex = index;
            
            // Position the menu
            contextMenu.style.left = `${e.pageX}px`;
            contextMenu.style.top = `${e.pageY}px`;
            
            // Show/hide combine options based on position
            if (index > 0) {
                combinePrevBtn.style.display = 'block';
            } else {
                combinePrevBtn.style.display = 'none';
            }
            
            if (index < composedText.length - 1) {
                combineNextBtn.style.display = 'block';
            } else {
                combineNextBtn.style.display = 'none';
            }
            
            // Show the menu
            contextMenu.style.display = 'block';
        }
        
        // Hide context menu when clicking elsewhere
        document.addEventListener('click', () => {
            contextMenu.style.display = 'none';
        });
        
        // Delete word from context menu
        deleteWordBtn.addEventListener('click', () => {
            handleDeleteWord(contextMenuWordIndex);
        });
        
        // Combine with previous word
        combinePrevBtn.addEventListener('click', () => {
            if (contextMenuWordIndex <= 0) return;
            
            const currentWord = composedText[contextMenuWordIndex];
            const prevWord = composedText[contextMenuWordIndex - 1];
            
            // Skip if either is a linebreak
            if ((typeof currentWord === 'object' && currentWord.type === 'linebreak') ||
                (typeof prevWord === 'object' && prevWord.type === 'linebreak')) {
                return;
            }
            
            // Get the text of both words
            const currentText = typeof currentWord === 'string' ? 
                currentWord : 
                (currentWord.type === 'text' ? currentWord.text : '');
                
            const prevText = typeof prevWord === 'string' ? 
                prevWord : 
                (prevWord.type === 'text' ? prevWord.text : '');
            
            // Combine the words with a space
            const combinedText = `${prevText} ${currentText}`;
            
            // Replace the previous word with the combined word and remove the current word
            composedText[contextMenuWordIndex - 1] = combinedText;
            composedText.splice(contextMenuWordIndex, 1);
            
            renderComposedText();
        });
        
        // Combine with next word
        combineNextBtn.addEventListener('click', () => {
            if (contextMenuWordIndex >= composedText.length - 1) return;
            
            const currentWord = composedText[contextMenuWordIndex];
            const nextWord = composedText[contextMenuWordIndex + 1];
            
            // Skip if either is a linebreak
            if ((typeof currentWord === 'object' && currentWord.type === 'linebreak') ||
                (typeof nextWord === 'object' && nextWord.type === 'linebreak')) {
                return;
            }
            
            // Get the text of both words
            const currentText = typeof currentWord === 'string' ? 
                currentWord : 
                (currentWord.type === 'text' ? currentWord.text : '');
                
            const nextText = typeof nextWord === 'string' ? 
                nextWord : 
                (nextWord.type === 'text' ? nextWord.text : '');
            
            // Combine the words with a space
            const combinedText = `${currentText} ${nextText}`;
            
            // Replace the current word with the combined word and remove the next word
            composedText[contextMenuWordIndex] = combinedText;
            composedText.splice(contextMenuWordIndex + 1, 1);
            
            renderComposedText();
        });
        
        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (selectedWordIndex === null) return;
            
            // Toggle between text and button when 't' is pressed
            if (e.key === 't') {
                toggleWordFormat();
                e.preventDefault();
            }
            
            // Add period and line break when '.' is pressed
            if (e.key === '.') {
                togglePeriod();
                e.preventDefault();
            }
            
            // Combine with previous word when 'a' is pressed
            if (e.key === 'a') {
                combinePrevWord();
                e.preventDefault();
            }
            
            // Combine with next word when 's' is pressed
            if (e.key === 's') {
                combineNextWord();
                e.preventDefault();
            }
        });
        
        // Toggle word format between button and text
        function toggleWordFormat() {
            if (selectedWordIndex === null) return;
            
            const item = composedText[selectedWordIndex];
            
            if (typeof item === 'string') {
                // Convert from string to object with type 'text'
                composedText[selectedWordIndex] = { type: 'text', text: item };
            } else if (item.type === 'text') {
                // Convert from object back to string
                composedText[selectedWordIndex] = item.text;
            }
            
            selectedWordIndex = null;
            renderComposedText();
        }
        
        // Toggle period at the end of the word and create a line break
        function togglePeriod() {
            if (selectedWordIndex === null) return;
            
            const item = composedText[selectedWordIndex];
            let shouldAddLineBreak = true;
            
            // Check if we need to add or remove a period
            if (typeof item === 'string') {
                if (item.endsWith('.')) {
                    // If it already ends with a period, remove it
                    composedText[selectedWordIndex] = item.slice(0, -1);
                    shouldAddLineBreak = false; // Don't add line break when removing period
                    
                    // Remove the line break after this word if the next line is empty
                    if (selectedWordIndex + 1 < composedText.length && 
                        typeof composedText[selectedWordIndex + 1] === 'object' && 
                        composedText[selectedWordIndex + 1].type === 'linebreak') {
                        
                        // Check if the line after the break is empty
                        let isNextLineEmpty = true;
                        let i = selectedWordIndex + 2; // Start from the item after the linebreak
                        
                        // Check if there are words until the next linebreak
                        while (i < composedText.length && 
                            !(typeof composedText[i] === 'object' && 
                                composedText[i].type === 'linebreak')) {
                            // If there's any content, the line is not empty
                            isNextLineEmpty = false;
                            break;
                        }
                        
                        // If the next line is empty or there is no next line, remove the linebreak
                        if (isNextLineEmpty) {
                            composedText.splice(selectedWordIndex + 1, 1);
                        }
                    }
                } else {
                    // If it doesn't end with a period, add one
                    composedText[selectedWordIndex] = item + '.';
                }
            } else if (item.type === 'text') {
                if (item.text.endsWith('.')) {
                    // If it already ends with a period, remove it
                    composedText[selectedWordIndex] = { ...item, text: item.text.slice(0, -1) };
                    shouldAddLineBreak = false; // Don't add line break when removing period
                    
                    // Remove the line break after this word if the next line is empty (same logic as above)
                    if (selectedWordIndex + 1 < composedText.length && 
                        typeof composedText[selectedWordIndex + 1] === 'object' && 
                        composedText[selectedWordIndex + 1].type === 'linebreak') {
                        
                        let isNextLineEmpty = true;
                        let i = selectedWordIndex + 2;
                        
                        while (i < composedText.length && 
                            !(typeof composedText[i] === 'object' && 
                                composedText[i].type === 'linebreak')) {
                            isNextLineEmpty = false;
                            break;
                        }
                        
                        if (isNextLineEmpty) {
                            composedText.splice(selectedWordIndex + 1, 1);
                        }
                    }
                } else {
                    // If it doesn't end with a period, add one
                    composedText[selectedWordIndex] = { ...item, text: item.text + '.' };
                }
            }
            
            // Only add a line break if we added a period (not if we removed one)
            if (shouldAddLineBreak) {
                // Add a line break object after the current word
                composedText.splice(selectedWordIndex + 1, 0, { type: 'linebreak' });
            }
            
            selectedWordIndex = null;
            renderComposedText();
        }
        
        // Combine with previous word
        function combinePrevWord() {
            if (selectedWordIndex <= 0) return;
            
            const currentWord = composedText[selectedWordIndex];
            const prevWord = composedText[selectedWordIndex - 1];
            
            // Skip if either is a linebreak
            if ((typeof currentWord === 'object' && currentWord.type === 'linebreak') ||
                (typeof prevWord === 'object' && prevWord.type === 'linebreak')) {
                return;
            }
            
            // Get the text of both words
            const currentText = typeof currentWord === 'string' ? 
                currentWord : 
                (currentWord.type === 'text' ? currentWord.text : '');
                
            const prevText = typeof prevWord === 'string' ? 
                prevWord : 
                (prevWord.type === 'text' ? prevWord.text : '');
            
            // Combine the words with a space
            const combinedText = `${prevText} ${currentText}`;
            
            // Replace the previous word with the combined word and remove the current word
            composedText[selectedWordIndex - 1] = combinedText;
            composedText.splice(selectedWordIndex, 1);
            
            selectedWordIndex = selectedWordIndex - 1;
            renderComposedText();
        }
        
        // Combine with next word
        function combineNextWord() {
            if (selectedWordIndex >= composedText.length - 1) return;
            
            const currentWord = composedText[selectedWordIndex];
            const nextWord = composedText[selectedWordIndex + 1];
            
            // Skip if either is a linebreak
            if ((typeof currentWord === 'object' && currentWord.type === 'linebreak') ||
                (typeof nextWord === 'object' && nextWord.type === 'linebreak')) {
                return;
            }
            
            // Get the text of both words
            const currentText = typeof currentWord === 'string' ? 
                currentWord : 
                (currentWord.type === 'text' ? currentWord.text : '');
                
            const nextText = typeof nextWord === 'string' ? 
                nextWord : 
                (nextWord.type === 'text' ? nextWord.text : '');
            
            // Combine the words with a space
            const combinedText = `${currentText} ${nextText}`;
            
            // Replace the current word with the combined word and remove the next word
            composedText[selectedWordIndex] = combinedText;
            composedText.splice(selectedWordIndex + 1, 1);
            
            renderComposedText();
        }
        
        // Initialize
        renderComposedText();
    </script>
</body>
</html>
